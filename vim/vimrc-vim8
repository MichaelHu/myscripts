" ===========================================
" 1. Common Settings



" ------------------------------------------
" 1.1 Autoload Plugins

" https://github.com/tpope/vim-pathogen
" use ~/.vim/bundle/plugin-name
execute pathogen#infect()
filetype plugin indent on


" ------------------------------------------
" 1.2 Other Common Settings

" color theme
colorscheme desert

set nocompatible
set backspace=indent,eol,start
syntax on

set fencs=utf-8,gb18030,gb2312,latin-1
set fenc=utf-8
set enc=utf-8

set nu
set ts=4
set sw=4
set smarttab
set expandtab
set autoindent
set cindent
" set cursorline

set foldmethod=marker
set foldmarker={,}
set foldlevel=10

" show line number, column number, percentage, and full path of current file, truncated
" when too long
" set statusline+=[\ %l:%c(%p%%)\ ]%<[\ %F\ ]

" show buffer number, percentage, line number, column number, ascii number, 
" byte index under cursor, modified tag, and full file path
set statusline=B%n\|%p%%\|L%l\|C%c\|0x%B\|b%o\|%m%<%F

" title
set title titlestring=%m%t titlelen=50

" formatoptions[fo]: auto wrap text and comments with textwidth,
" allow formatting comments with `gq`, allow wrapping multi-byte characters
" and without inserting space when joining
set wrap fo=tcqmM


" incsearch
set incsearch

" highlight search
set hlsearch




" ------------------------------------------
" 1.3 Abbreviations 

cab #s redi! > /tmp/files \| sil ls \| redi END \| !cat /tmp/files \| grep -E 



" ------------------------------------------
" 1.4 Maps 

let mapleader = ','

" visual mode下，对选中文本进行查询，特别是中文查询，省去输入中文
" 通过yank中转选中内容
vmap <Leader>s "zy:let @/ = @z<CR>

" visual mode下，对选中内容注释/去注释
vmap <Leader>c :s/^\([ \t]*\)\(.*\)$/\1\/\/ \2/g<CR>:let @/ = ''<CR>
vmap <Leader>C :s/^\([ \t]*\)\/\/ \(.*\)$/\1\2/g<CR>:let @/ = ''<CR>

" visual / normal / Select mode下，清空搜索条件
map <Leader><Char-0x20> :let @/ = ''<CR>

" normal mode下，获取当前buffer的全路径，并复制到mac剪贴板
nmap <Leader>f :call F_current_buffer_fullpath()<CR>

" normal mode下，在资源管理器中打开当前目录
nmap <Leader>o :call system( 'open `pwd`' )<CR>

" normal mode下，读取文件指定行
nmap <Leader>r :call F_r( '

" visual mode下，将选中内容复制到mac剪贴板
vmap <Leader>y "zy:call F_copy_selected_text()<CR>

" visual mode下，将选中内容增量复制到mac剪贴板
vmap <Leader>a "zy:call F_inc_copy_selected_text()<CR>
vmap <Leader>A "zy:call F_inc_copy_selected_text( 1 )<CR>




" ------------------------------------------
" 1.5 Functions 

" get lines from file, and append to the position after the cursor
" @param {string} file      - absolute file path
" @param {number} start     - the start line number
" @param {number} count     - the count of lines to read in
" @usage :call F_r( '/path/to/file', 5, 10 )
fu F_r( file, start, count ) abort
    let lines = readfile( a:file, '', 10000 )
    let i = 0
    let cur = line( '.' )
    echo 'total lines: ' . len( lines ) 
    for l:line in lines
        let i += 1
        if i >= a:start && i < a:start + a:count
            " echo i . l:line
            let failed = append( cur, l:line )
            let cur += 1
        endif
        if i >= a:start + a:count
            break
        endif
    endfor
    echo 'read lines: ' . ( i - a:start ) 
endfu


" get the full path of current buffer, and put it into mac clipboard 
" @usage :call F_current_buffer_fullpath()
fu F_current_buffer_fullpath() abort
    let curFile = getreg( '%' )
    if match( curFile, "^/" ) != 0
        let curFile = getcwd() . '/' . curFile
    endif
    echo 'Path: ' . curFile
    call system( 'echo -n ' . curFile . ' | pbcopy' )
endfu


" copy the selected text under visual mode into mac clipboard
" @usage "zy:call F_copy_selected_text()
fu F_copy_selected_text() abort
    let text = getreg( 'z' )
    let tmpFile = '/tmp/vim-selected-text'
    let text = substitute( text, '\%x00', '\r', 'g' )
    let lineCount = len( split( text, '\r', 1 ) )
    " compute accurate linecount
    if strridx( text, "\r" ) == strlen( text ) - 1
        let lineCount = lineCount - 1
    endif
    call writefile( [ text ], tmpFile, 'b' )
    call system( 'cat ' . tmpFile . ' | pbcopy' )
    echo 'copy ' . lineCount .' lines successfully'
endfu


" increment-copy selected text under visual mode into mac clipboard 
" @usage "zy:call F_inc_copy_selected_text()
fu F_inc_copy_selected_text( ... ) abort
    let text = getreg( 'z' )
    let tmpFile = '/tmp/vim-inc-selected-text'
    let text = substitute( text, '\%x00', '\r', 'g' )
    let lineCount = len( split( text, '\r', 1 ) )
    " compute accurate linecount
    if strridx( text, "\r" ) == strlen( text ) - 1
        let lineCount = lineCount - 1
    endif
    let flag = 'a'
    if a:0 > 0 && a:1 == 1
        let flag = ''
    endif
    call writefile( [ text ], tmpFile, flag )
    call system( 'cat ' . tmpFile . ' | pbcopy' )
    echo 'inc copy ' . lineCount .' lines successfully'
endfu



" ===========================================
" 2. Plugins


" 2.1 NERDTree
" ------------------------------------------

" https://github.com/scrooloose/nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && !exists("s:std_in") | NERDTree | :wincmd l | endif
" autocmd vimenter * NERDTree | :wincmd l
map <F7> <Esc>:NERDTreeToggle<CR>
let NERDTreeWinSize=36




" 2.2 Tlist
" ------------------------------------------

" map <F8> <Esc>:TlistToggle<CR>




" 2.3 Syntastic
" ------------------------------------------

" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

" passive mode, only activated by command line command `:Syntasticcheck`
let g:syntastic_mode_map = { 
    \ "mode": "passive",
    \ "active_filetypes": [],
    \ "passive_filetypes": [] 
    \ }

" default disabled, use `:SyntasticCheck jslint` instead
" let g:syntastic_enable_javascript_checker = 1
" ['closurecompiler', 'eslint', 'flow', 'gjslint', 'jscs', 'jshint', 'jsl', 'jslint', 'jsxhint', 'standard']
" standard: no extra semicolon
" jshint: need semicolon
"
" let g:syntastic_javascript_jslint_args = "--white --nomen --regexp --browser --devel --windows --sloppy --vars"
let g:syntastic_javascript_checkers = [ 'jslint' ]
map <F9> :SyntasticToggleMode<CR>





" 2.4 neocomplete
" ------------------------------------------

" Note: This option must be set in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'





" ===========================================
" 3. Other

au BufNewFile,BufRead *.vue setf html




